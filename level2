#include <ncurses.h>
#include <unistd.h>
#include <vector>
using namespace std;

int main() {
    initscr();
    cbreak();
    noecho();
    keypad(stdscr, TRUE);
    nodelay(stdscr, TRUE);

    int board[21][21];

    for (int i = 0; i < 21; i++) {
        for (int j = 0; j < 21; j++) {
            if (i == 0 && j == 0 || i == 0 && j == 20 || i == 20 && j == 0 || i == 20 && j == 20) {
                board[i][j] = 2;
            } else if (i == 0 || i == 20 || j == 0 || j == 20) {
                board[i][j] = 1; 
            }else {
                board[i][j] = 0;
            }
        }
    }

    vector<int> x;
    vector<int> y;
    x.push_back(10);
    x.push_back(10);
    x.push_back(10);
    y.push_back(10);
    y.push_back(11);
    y.push_back(12);



    int headX = 10;
    int headY = 10;

    int tailX = 10;
    int tailY = 12;

    int prevheadX = 10;
    int prevheadY = 10;
    int prevtailX = 10;
    int prevtailY = 12;
    int direction = KEY_RIGHT;

    while (1) {
        clear();
        
        for (int i = 0; i < 21; i++) {
            for (int j = 0; j < 21; j++) {
                move(i, j * 2);

                if (board[i][j] == 0) {
                    addch('0');
                    addch(' ');
                } else if (board[i][j] == 1) {
                    addch('1');
                    addch(' ');
                } else if (board[i][j] == 2) {
                    addch('2');
                    addch(' ');
                }
            }
        }
        

        move(y.front(), x.front() * 2);
        addch('3');
        addch(' ');

        for (int i = 1; i < x.size(); i++) {
            move(y[i], x[i] * 2);
            addch('4');
            addch(' ');
        }


        refresh();

        usleep(500000);

        int key = getch();

        if (key == KEY_UP && direction != KEY_DOWN) {
            direction = KEY_UP;
        } else if (key == KEY_DOWN && direction != KEY_UP) {
            direction = KEY_DOWN;
        } else if (key == KEY_LEFT && direction != KEY_RIGHT) {
            direction = KEY_LEFT;
        } else if (key == KEY_RIGHT && direction != KEY_LEFT) {
            direction = KEY_RIGHT;
        }

        switch (direction) {
            case KEY_UP:
                headY--;
                break;
            case KEY_DOWN:
                headY++;
                break;
            case KEY_LEFT:
                headX--;
                break;
            case KEY_RIGHT:
                headX++;
                break;
        }

        x.insert(x.begin(), headX);
        y.insert(y.begin(), headY);

        x.pop_back();
        y.pop_back();



    }

    endwin();
    return 0;
}
